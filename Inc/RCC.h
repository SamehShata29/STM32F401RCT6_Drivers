/*
 * RCC.h
 *
 *  Created on: Jan 30, 2024
 *      Author: sameh
 */

#ifndef RCC_H_
#define RCC_H_
/*================= includes =================*/
#include "stm32f4xx.h"
#include "common.h"
#include <stddef.h>
/*================= Macros =================*/


//HSE status.
#define HSE_OSC_OFF						 0
#define HSE_OSC_ON						 1
//HSI status.
#define HSI_OSC_ON						 1
#define HSI_OSC_OFF						 0
//PLL configuration and source.
#define PLLSRC_HSI						 0
#define PLLSRC_HSE						 1
#define PLL_OFF							 0
#define PLL_ON							 1
//AHB prescaler HPRE[4:7].
#define RCC_SYSCLK_DIV1                  RCC_CFGR_HPRE_DIV1
#define RCC_SYSCLK_DIV2                  RCC_CFGR_HPRE_DIV2
#define RCC_SYSCLK_DIV4                  RCC_CFGR_HPRE_DIV4
#define RCC_SYSCLK_DIV8                  RCC_CFGR_HPRE_DIV8
#define RCC_SYSCLK_DIV16                 RCC_CFGR_HPRE_DIV16
#define RCC_SYSCLK_DIV64                 RCC_CFGR_HPRE_DIV64
#define RCC_SYSCLK_DIV128                RCC_CFGR_HPRE_DIV128
#define RCC_SYSCLK_DIV256                RCC_CFGR_HPRE_DIV256
#define RCC_SYSCLK_DIV512                RCC_CFGR_HPRE_DIV512
//APB Low speed prescaler (APB1).
#define RCC_APB1_HCLK_DIV1               RCC_CFGR_PPRE1_DIV1
#define RCC_APB1_HCLK_DIV2               RCC_CFGR_PPRE1_DIV2
#define RCC_APB1_HCLK_DIV4               RCC_CFGR_PPRE1_DIV4
#define RCC_APB1_HCLK_DIV8               RCC_CFGR_PPRE1_DIV8
#define RCC_APB1_HCLK_DIV16              RCC_CFGR_PPRE1_DIV16
//APB high-speed prescaler (APB2).
#define RCC_APB2_HCLK_DIV1               RCC_CFGR_PPRE2_DIV1
#define RCC_APB2_HCLK_DIV2               RCC_CFGR_PPRE2_DIV2
#define RCC_APB2_HCLK_DIV4               RCC_CFGR_PPRE2_DIV4
#define RCC_APB2_HCLK_DIV8               RCC_CFGR_PPRE2_DIV8
#define RCC_APB2_HCLK_DIV16              RCC_CFGR_PPRE2_DIV16
/*================= Macro functions =================*/
/*-------------- AHB1 Peripherals --------------*/
//AHB1 peripherals enable
#define GPIOA_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN_Pos))
#define GPIOB_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN_Pos))
#define GPIOC_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN_Pos))
#define GPIOD_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIODEN_Pos))
#define GPIOE_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOEEN_Pos))
#define GPIOH_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOHEN_Pos))
#define CRC_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_CRCEN_Pos))
#define DMA1_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA1EN_Pos))
#define DMA2_ENABLE()					(_SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA2EN_Pos))
//AHB1 peripherals disable
#define GPIOA_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN_Pos))
#define GPIOB_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN_Pos))
#define GPIOC_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN_Pos))
#define GPIOD_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIODEN_Pos))
#define GPIOE_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOEEN_Pos))
#define GPIOH_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOHEN_Pos))
#define CRC_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_CRCEN_Pos))
#define DMA1_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA1EN_Pos))
#define DMA2_DISABLE()					(_CLEAR_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA2EN_Pos))
//AHB1 peripherals reset
#define GPIOA_RESET()					(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOARST_Pos))
#define GPIOB_RESET()					(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOBRST_Pos))
#define GPIOC_RESET()					(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOCRST_Pos))
#define GPIOD_RESET()					(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIODRST_Pos))
#define GPIOE_RESET()					(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOERST_Pos))
#define GPIOH_RESET()					(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOHRST_Pos))
#define CRC_RESET()						(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1ENR_CRCEN_Pos))
#define DMA1_RESET()					(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1ENR_DMA1EN_Pos))
#define DMA2_RESET()					(_SET_BIT(RCC->AHB1RSTR, RCC_AHB1ENR_DMA2EN_Pos))
//AHB1 peripherals release reset
#define GPIOA_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOARST_Pos))
#define GPIOB_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOBRST_Pos))
#define GPIOC_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOCRST_Pos))
#define GPIOD_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIODRST_Pos))
#define GPIOE_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOERST_Pos))
#define GPIOH_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_GPIOHRST_Pos))
#define CRC_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_CRCRST_Pos))
#define DMA1_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_DMA1RST_Pos))
#define DMA2_UNRESET()					(_CLEAR_BIT(RCC->AHB1RSTR, RCC_AHB1RSTR_DMA2RST_Pos))
/*-------------- AHB2 Peripherals --------------*/
//AHB2 peripherals enable
#define OTGSF_ENABLE()					(_SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_OTGFSEN_Pos))
//AHB2 peripherals disable
#define OTGSF_DISABLE()					(_CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_OTGFSEN_Pos))
//AHB2 peripherals reset
#define OTGSF_RESET()					(_SET_BIT(RCC->AHB2RSTR, RCC_AHB2RSTR_OTGFSRST_Pos))
//AHB1 peripherals release reset
#define OTGSF_UNRESET()					(_CLEAR_BIT(RCC->AHB2RSTR, RCC_AHB2RSTR_OTGFSRST_Pos))
/*-------------- APB1 Peripherals --------------*/
//APB1 peripherals enable
#define TIM2_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN_Pos))
#define TIM3_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN_Pos))
#define TIM4_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN_Pos))
#define TIM5_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN_Pos))
#define WWDG_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN_Pos))
#define SPI2_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN_Pos))
#define SPI3_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI3EN_Pos))
#define USART2_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN_Pos))
#define I2C1_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN_Pos))
#define I2C2_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN_Pos))
#define I2C3_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C3EN_Pos))
#define PWR_ENABLE()					(_SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN_Pos))
//APB1 peripherals disable
#define TIM2_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN_Pos))
#define TIM3_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN_Pos))
#define TIM4_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN_Pos))
#define TIM5_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN_Pos))
#define WWDG_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN_Pos))
#define SPI2_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN_Pos))
#define SPI3_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI3EN_Pos))
#define USART2_DISABLE()				(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN_Pos))
#define I2C1_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN_Pos))
#define I2C2_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN_Pos))
#define I2C3_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C3EN_Pos))
#define PWR_DISABLE()					(_CLEAR_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN_Pos))
//APB1 peripherals reset
#define TIM2_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_TIM2RST_Pos))
#define TIM3_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_TIM3RST_Pos))
#define TIM4_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_TIM4RST_Pos))
#define TIM5_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_TIM5RST_Pos))
#define WWDG_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_WWDGRST_Pos))
#define SPI2_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_SPI2RST_Pos))
#define SPI3_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_SPI3RST_Pos))
#define USART2_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_USART2RST_Pos))
#define I2C1_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_I2C1RST_Pos))
#define I2C2_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_I2C2RST_Pos))
#define I2C3_RESET()					(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_I2C3RST_Pos))
#define PWR_RESET()						(_SET_BIT(RCC->APB1RSTR, RCC_APB1RSTR_PWRRST_Pos))
//APB1 peripherals release reset
#define TIM2_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_TIM2RST_Pos))
#define TIM3_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_TIM3RST_Pos))
#define TIM4_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_TIM4RST_Pos))
#define TIM5_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_TIM5RST_Pos))
#define WWDG_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_WWDGRST_Pos))
#define SPI2_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_SPI2RST_Pos))
#define SPI3_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_SPI3RST_Pos))
#define USART2_UNRESET()				(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_USART2RST_Pos))
#define I2C1_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_I2C1RST_Pos))
#define I2C2_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_I2C2RST_Pos))
#define I2C3_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_I2C3RST_Pos))
#define PWR_UNRESET()					(_CLEAR_BIT(RCC->APB1RSTR, RCC_APB1RSTR_PWRRST_Pos))/*================= Data type declarations =================*/
/*-------------- APB2 Peripherals --------------*/
//APB2 peripherals enable
#define TIM1_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN_Pos))
#define USART1_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN_Pos))
#define USART6_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART6EN_Pos))
#define ADC1_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN_Pos))
#define SDIO_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SDIOEN_Pos))
#define SPI1_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN_Pos))
#define SPI4_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI4EN_Pos))
#define SYSCFG_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN_Pos))
#define TIM9_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM9EN_Pos))
#define TIM10_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM10EN_Pos))
#define TIM11_ENABLE()					(_SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM11EN_Pos))
////APB2 peripherals disable
#define TIM1_DISABLE()					(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN_Pos))
#define USART1_DISABLE()				(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN_Pos))
#define USART6_DISABLE()				(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_USART6EN_Pos))
#define ADC1_DISABLE()					(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN_Pos))
#define SDIO_DISABLE()					(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_SDIOEN_Pos))
#define SPI1_DISABLE()					(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN_Pos))
#define SPI4_DISABLE()					(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI4EN_Pos))
#define SYSCFG_DISABLE()				(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN_Pos))
#define TIM9_DISABLE()					(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM9EN_Pos))
#define TIM10_DISABLE()					(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM10EN_Pos))
#define TIM11_DISABLE()					(_CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM11EN_Pos))
//APB2 peripherals reset
#define TIM1_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM1RST_Pos))
#define USART1_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_USART1RST_Pos))
#define USART6_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_USART6RST_Pos))
#define ADC1_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADCRST_Pos))
#define SDIO_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SDIORST_Pos))
#define SPI1_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST_Pos))
#define SPI4_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI4RST_Pos))
#define SYSCFG_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SYSCFGRST_Pos))
#define TIM9_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST_Pos))
#define TIM10_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM10RST_Pos))
#define TIM11_RESET()					(_SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM11RST_Pos))
//APB2 peripherals release reset
#define TIM1_UNRESET()					(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM1RST_Pos))
#define USART1_UNRESET()				(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_USART1RST_Pos))
#define USART6_UNRESET()				(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_USART6RST_Pos))
#define ADC1_UNRESET()					(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADCRST_Pos))
#define SDIO_UNRESET()					(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SDIORST_Pos))
#define SPI1_UNRESET()					(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI1RST_Pos))
#define SPI4_UNRESET()					(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SPI4RST_Pos))
#define SYSCFG_UNRESET()				(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_SYSCFGRST_Pos))
#define TIM9_UNRESET()					(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST_Pos))
#define TIM10_UNRESET()					(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM10RST_Pos))
#define TIM11_UNRESET()					(_CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM11RST_Pos))


/*================= User defined data types =================*/
/*
 * Oscillator types.
 */
typedef enum
{
	RCC_OSC_HSI = 0,
	RCC_OSC_HSE,
	RCC_OSC_LSE,
	RCC_OSC_LSI
}osc_type;

/*
 * Clock sources.
 */
typedef enum
{
	CLKSRC_HSI = 0,
	CLKSRC_HSE,
	CLKSRC_PLL
}CLKSRC_type;

/*
 * Oscillator configurations.
 */
typedef struct
{
	osc_type OSC_type;
	uint32_t HSI_state;
	uint32_t HSE_state;
}OSC_CFG_type;

/*
 * PLL configurations.
 */
typedef struct
{
	uint32_t PLLN;
	uint32_t PLLM;
	uint32_t PLLQ;
	uint32_t PLLP;
	uint32_t PLL_state;
	uint32_t PLL_SRC ;
}PLL_CFG_type;


/*
 * Clock configurations.
 */
typedef struct
{
	uint32_t AHB_prescaler;
	uint32_t APB1_prescaler;
	uint32_t APB2_prescaler;
	CLKSRC_type SYSCLK_SRC;

}CLK_CFG_type;


/*================= Software interfaces =================*/
//Clock speed and source section
Std_ReturnStatus OSC_CFG_init(OSC_CFG_type* OSC);
Std_ReturnStatus CLK_CFG_init(CLK_CFG_type* CLK);
Std_ReturnStatus PLL_CFG_init(PLL_CFG_type* PLL);
void HSE25Mhz_84MHzOUT(void);
void RESET_DEFAULT_CLCK(void);


#endif /* RCC_H_ */
